@page "/userevents/{Id:int}"
@using System.Text.Json
@using System.Net
@using APForums.Client.Data.Storage
@using System.IdentityModel.Tokens.Jwt
@using APForums.Client.Data
@using APForums.Client.Data.DTO
@using APForums.Client.Data.Structures
@using APForums.Client.Data.Interfaces
@using APForums.Client.Data.DTO.PagesDTO
@inject NavigationManager NavManager
@inject IEventService _eventService;


@if(response == null)
{
    <div>
       @Id
    </div>
}
else
{
    <div class="bg-gradient-to-b from-primary/5 from-1% via-white via-50% to-primary/5 to-99% rounded-lg shadow-lg py-6 px-8">
        <h1 class="mt-4 text-base md:text-lg lg:text-2xl font-serif font-bold text-primary">Upcoming Events</h1>
        <hr class="w-full mt-1 border-2 border-solid border-secondary/80">
        <div class="mt-4 p-4 flex flex-col items-center md:items-start">
            <div class="flex w-full justify-between max-w-3xl items-center bg-secondary text-base md:text-lg lg:text-xl text-secondarytext px-2 md:px-4 lg:px-6 py-2 transform hover:scale-102 transition-transform duration-300" @onclick="@(() => showPublic = !showPublic)">
                <h3 class="mr-3">Public Events</h3>
                <i class="mt-1 fa-solid fa-chevron-down text-secondarytext fa-sm transition-transform duration-300 @(showPublic ? "fa-rotate-180" : "")"></i>
            </div>
            @if (showPublic)
            {
                <div class="flex flex-col md:flex-wrap md:flex-row">
                    @foreach (var e in response.Data.PublicEvents)
                    {
                        @*<span><a href="/event/@e.Event.Id">@e.Event.Title</a> || Interested: @e.IsInterested.ToString())</span>*@
                        <EventCard ShowClub="true" Event="e" />
                    }
                    @if (response.Data.PublicEvents.Count() == 0)
                    {
                        <h3 class="p-2 mx-2 text-primary font-medium">There are no upcoming public events.. :/</h3>
                    }
                </div>
            }
            <div class="mt-6 md:mt-10 w-full flex justify-between max-w-3xl items-center bg-secondary text-base md:text-lg lg:text-xl text-secondarytext px-2 md:px-4 lg:px-6 py-2 transform hover:scale-102 transition-transform duration-300" @onclick="@(() => showPrivate = !showPrivate)">
                <h3 class="mr-3">Private Events</h3>
                <i class="mt-1 fa-solid fa-chevron-down text-secondarytext fa-sm transition-transform duration-300 @(showPrivate ? "fa-rotate-180" : "")"></i>
            </div>
            @if (showPrivate)
            {
                <div class="flex flex-col md:flex-wrap md:flex-row">
                    @foreach (var e in response.Data.PrivateEvents)
                    {
                        @*<span><a href="/event/@e.Event.Id">@e.Event.Title</a> || Interested: @e.IsInterested.ToString())</span>*@
                        <EventCard ShowClub="true" Event="e" />
                    }
                    @if (response.Data.PrivateEvents.Count() == 0)
                    {
                        <h3 class="p-2 mx-2 text-primary font-medium">There are no upcoming private events.. :/</h3>
                    }
                </div>
            }
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }

    public BasicHttpResponseWithData<Data.DTO.PagesDTO.UserEvents> response = null;

    private bool showPublic = true;

    private bool showPrivate = true;

    protected override async Task OnInitializedAsync()
    {
        response = await _eventService.GetUserEvents(Id);
        if (response.Status != HttpStatusCode.OK)
        {
            await App.Current.MainPage.DisplayAlert("Whoopsie!", response.Error, "Ok");
            NavManager.NavigateTo("/home");
        }
    }
}
