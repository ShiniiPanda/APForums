// <auto-generated />
using System;
using APForums.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APForums.Server.Migrations
{
    [DbContext(typeof(ForumsDbContext))]
    [Migration("20230905173650_Added-Events-Visibility-Parameter")]
    partial class AddedEventsVisibilityParameter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("APForums.Server.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Message");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Source");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("activities");
                });

            modelBuilder.Entity("APForums.Server.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Abbreviation");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoPath")
                        .HasColumnType("longtext")
                        .HasColumnName("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(40)")
                        .HasDefaultValue("SIG");

                    b.HasKey("Id");

                    b.ToTable("clubs");
                });

            modelBuilder.Entity("APForums.Server.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("APForums.Server.Models.CommentImpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("comment_impressions");
                });

            modelBuilder.Entity("APForums.Server.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("connections");
                });

            modelBuilder.Entity("APForums.Server.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PostedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Title");

                    b.Property<int>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("APForums.Server.Models.EventInterest", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("event_interests");
                });

            modelBuilder.Entity("APForums.Server.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Intake")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<int>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("forums");
                });

            modelBuilder.Entity("APForums.Server.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("APForums.Server.Models.PostImpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("post_impressions");
                });

            modelBuilder.Entity("APForums.Server.Models.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("post_tags");
                });

            modelBuilder.Entity("APForums.Server.Models.ProfileTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("profile_tags");
                });

            modelBuilder.Entity("APForums.Server.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Invalid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("APForums.Server.Models.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("socials");
                });

            modelBuilder.Entity("APForums.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DOB");

                    b.Property<string>("DegreeType")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email")
                        .HasComputedColumnSql("CONCAT(TpNumber, '@mail.apu.edu.my')", false);

                    b.Property<string>("Enrollment")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HashSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IntakeCode")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Intake");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("Picture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValue("default_1.png")
                        .HasColumnName("Picture");

                    b.Property<string>("TPNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("TpNumber");

                    b.HasKey("Id");

                    b.HasIndex("TPNumber")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("APForums.Server.Models.UserActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ActivityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("users_activities");
                });

            modelBuilder.Entity("APForums.Server.Models.UserClub", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ClubId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("users_clubs");
                });

            modelBuilder.Entity("APForums.Server.Models.UserProfileTags", b =>
                {
                    b.Property<int>("ProfileTagId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.HasKey("ProfileTagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("users_profile_tags");
                });

            modelBuilder.Entity("forum_subscriptions", b =>
                {
                    b.Property<int>("SubscribedForumsId")
                        .HasColumnType("int");

                    b.Property<int>("SubscribedUsersId")
                        .HasColumnType("int");

                    b.HasKey("SubscribedForumsId", "SubscribedUsersId");

                    b.HasIndex("SubscribedUsersId");

                    b.ToTable("forum_subscriptions");
                });

            modelBuilder.Entity("posts_post_tags", b =>
                {
                    b.Property<int>("PostTagsId")
                        .HasColumnType("int");

                    b.Property<int>("PostsId")
                        .HasColumnType("int");

                    b.HasKey("PostTagsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("posts_post_tags");
                });

            modelBuilder.Entity("APForums.Server.Models.Comment", b =>
                {
                    b.HasOne("APForums.Server.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.CommentImpression", b =>
                {
                    b.HasOne("APForums.Server.Models.Comment", "Comment")
                        .WithMany("Impressions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.Connection", b =>
                {
                    b.HasOne("APForums.Server.Models.User", "Followed")
                        .WithMany()
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("APForums.Server.Models.Event", b =>
                {
                    b.HasOne("APForums.Server.Models.Club", "Club")
                        .WithMany("Events")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("APForums.Server.Models.EventInterest", b =>
                {
                    b.HasOne("APForums.Server.Models.Event", "Event")
                        .WithMany("EventInterests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("EventInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.Forum", b =>
                {
                    b.HasOne("APForums.Server.Models.Club", "club")
                        .WithMany("Forums")
                        .HasForeignKey("ClubId");

                    b.Navigation("club");
                });

            modelBuilder.Entity("APForums.Server.Models.Post", b =>
                {
                    b.HasOne("APForums.Server.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.PostImpression", b =>
                {
                    b.HasOne("APForums.Server.Models.Post", "Post")
                        .WithMany("Impressions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.RefreshToken", b =>
                {
                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.Social", b =>
                {
                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("Socials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.UserActivity", b =>
                {
                    b.HasOne("APForums.Server.Models.Activity", null)
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", null)
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APForums.Server.Models.UserClub", b =>
                {
                    b.HasOne("APForums.Server.Models.Club", "Club")
                        .WithMany("UserClubs")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("UserClubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APForums.Server.Models.UserProfileTags", b =>
                {
                    b.HasOne("APForums.Server.Models.ProfileTag", "ProfileTag")
                        .WithMany("UserProfileTags")
                        .HasForeignKey("ProfileTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", "User")
                        .WithMany("UserProfileTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfileTag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("forum_subscriptions", b =>
                {
                    b.HasOne("APForums.Server.Models.Forum", null)
                        .WithMany()
                        .HasForeignKey("SubscribedForumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SubscribedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("posts_post_tags", b =>
                {
                    b.HasOne("APForums.Server.Models.PostTag", null)
                        .WithMany()
                        .HasForeignKey("PostTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APForums.Server.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APForums.Server.Models.Activity", b =>
                {
                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("APForums.Server.Models.Club", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Forums");

                    b.Navigation("UserClubs");
                });

            modelBuilder.Entity("APForums.Server.Models.Comment", b =>
                {
                    b.Navigation("Impressions");
                });

            modelBuilder.Entity("APForums.Server.Models.Event", b =>
                {
                    b.Navigation("EventInterests");
                });

            modelBuilder.Entity("APForums.Server.Models.Forum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("APForums.Server.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Impressions");
                });

            modelBuilder.Entity("APForums.Server.Models.ProfileTag", b =>
                {
                    b.Navigation("UserProfileTags");
                });

            modelBuilder.Entity("APForums.Server.Models.User", b =>
                {
                    b.Navigation("EventInterests");

                    b.Navigation("Socials");

                    b.Navigation("UserActivities");

                    b.Navigation("UserClubs");

                    b.Navigation("UserComments");

                    b.Navigation("UserPosts");

                    b.Navigation("UserProfileTags");
                });
#pragma warning restore 612, 618
        }
    }
}
